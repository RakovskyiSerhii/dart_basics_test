/// Рекурсия - функция вызывает сама себя в процессе выполнения определенного алгоритма
/// Важно! Рекурсия всегда должна иметь проверку на выход иначе это превратит алгоритм в вечную рекурсию
/// Преймущества: скорость выполнения
/// Недостатки: сложность в понимании
/// В данноM примере Функция [doSome] принимает число [n]
/// Алгоритм должен вывести все символы от этого числа до 0
/// Вызываем [doSome] и передаем положительное число
/// В начале проверяется не достигли мы максимальной глубины рекурсии
/// после выводим число и снова вызываем эту же функцию, однако отнимаем от входного параметра 1
/// То есть алгоритм будет следующим
/// [0]: {
/// n == 10;
/// doSome(n-1);
/// }
/// [1]: {
/// n == 9;
/// doSome(n-1);
/// }
/// ...
/// [n] {
///  n == 0;
///  if (n == 0) return;  
/// }
/// На шаге [n] мы достигли максимальной глубины рекурсии и должны прервать выполнение
/// По факту мы больше не вызываем функию, а прерываем выполнение используя return

void main(List<String> args) {
  doSome(-10);
}

void doSome(int n) {
  if (n <= 0) {
    return;
  }
  print(n);
  doSome(n - 1);
}
